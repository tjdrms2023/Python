import pygame
import random
from time import sleep

WHITE = (255, 255, 255) #흰색의 RGB 값
RED = (255, 0, 0)
pad_width, pad_height = 740, 370
background_width = 740

aircraft_width, aircraft_height = 90, 55
enemy_width, enemy_height = 300, 200

fireball1_width, fireball1_height = 140, 60
fireball2_width, fireball2_height = 86, 60


def textObj(text, font):
	textSurface = font.render(text, True, RED)
	return textSurface, textSurface.get_rect()

def dispMessage(text):
	global gamepad

	largeText = pygame.font.Font('freesansbold.ttf', 115)
	TextSurf, TextRect = textObj(text, largeText)
	TextRect.center = ((pad_width/2),(pad_height/2))
	gamepad.blit(TextSurf, TextRect)
	pygame.display.update()
	sleep(2)
	runGame()

def crash():
	global gamepad
	dispMessage('WASTED!')

def drawObject(obj, x, y): #이미지 출력하는 함수. 
	global gamepad
	gamepad.blit(obj, (x, y))


def runGame():
	global gamepad, aircraft, clock, background1, background2 #전역변수로 설정. 
	global enemy, fires, bullet, boom

	#기본값 설정.
	isShotEnemy = False
	boom_count = 0

	bullet_xy = []

	x = pad_width * 0.05
	y = pad_height * 0.8
	y_change = 0 #비행기가 위 아래로 움직이므로 비행기 y좌표 변화를 나타내는 변수.

	background1_x = 0 #배경 좌상단 모서리 x 좌표. 최초 값은 0.
	background2_x = background_width

	enemy_x = pad_width
	enemy_y = random.randrange(0, pad_height) #y좌푯값이 무작위로 나오게 설정. 

	fire_x = pad_width
	fire_y = random.randrange(0, pad_height)
	random.shuffle(fires) #불꽃 두 종류 중 무작위로 섞어서
	fire = fires[0]       #첫번째 값 출력.

	#키보드 조작 & 게임 메인 구동.
	crashed = False #게임 종료를 위한 플래그.
	while not crashed:
		for event in pygame.event.get():  #pygame.event.get()은 게임에서 발생하는 이벤트 리턴.
			if event.type == pygame.QUIT: #event.type이 창을 닫는 것(pygame.QUIT)이면
				crashed = True            #crashed를 True로 해서 while문 탈출. 

			if event.type == pygame.KEYDOWN: #버튼 눌렸을 때.
				if event.key == pygame.K_UP:
					y_change -= 5 
				elif event.key == pygame.K_DOWN: 
					y_change += 5

				elif event.key == pygame.K_LCTRL:
					bullet_x = x + aircraft_width
					bullet_y = y + (aircraft_height/2)
					bullet_xy.append([bullet_x,bullet_y])

				elif event.key == pygame.K_SPACE:
					sleep(5)

			if event.type == pygame.KEYUP: #버튼 안 눌렀을 때.
				if event.key == pygame.K_UP or event.key == pygame.K_DOWN:
					y_change = 0 #안 눌렀을 땐 UP, DOWN 둘 다 0.

		
		gamepad.fill(WHITE) #pygame.QUIT이 아니면 게임판을 흰색으로 채우고 

		#배경 움직임 
		background1_x -= 2
		background2_x -= 2

		#배경 움직임
		if background1_x == -background_width:
			background1_x = background_width

		if background2_x == -background_width:
			background2_x = background_width

		drawObject(background1, background1_x, 0)
		drawObject(background2, background2_x, 0)

		#비행기 움직임
		y += y_change #키보드 입력에 따라 비행기의 y 좌표를 변경.
		if y < 0: #비행기가 하단에 도달하면
			y = 0 #더 밑으로 안 떨어지게
		elif y > pad_height - aircraft_height: #비행기가 상단에 도달하면
			y = pad_height - aircraft_height   #더 위로 못가게

		#적 움직임
		enemy_x -= 7 #왼쪽으로 적 움직임.
		if enemy_x <= 0: 		#적이 왼쪽 끝 도달하면
			enemy_x = pad_width #오른쪽 끝으로 보내고
			enemy_y = random.randrange(0, pad_height) #적의 y 좌푯값 무작위 생성.

		#불꽃 움직임
		if fire[1] == None:
			fire_x -= 30
		else:
			fire_x -= 15

		if fire_x <= 0:
			fire_x = pad_width
			fire_y = random.randrange(0, pad_height)
			random.shuffle(fires)
			fire = fires[0]


		#총알 움직임
		if len(bullet_xy) != 0:
			for i, bxy in enumerate(bullet_xy):
				bxy[0] += 15
				bullet_xy[i][0] = bxy[0]

				#총알이 적에게 맞았는지 체크 
				if bxy[0] >= enemy_x:
					if bxy[1] > enemy_y and bxy[1] < enemy_y + enemy_height:
						bullet_xy.remove(bxy)
						isShotEnemy = True
				if bxy[0] >= pad_width:
					try:
						bullt_xy.remove(bxy)
					except:
						pass

		if x + aircraft_width > enemy_x:
			if (y > enemy_y and y < enemy_y + enemy_height) or (y + aircraft_height > enemy_y and y + aircraft_height < enemy_y + enemy_height):
				crash()

		if fire[1] != None:
			if fire[0] == 0:
				fireball_width = fireball1_width
				fireball_height = fireball1_height
			elif fire[0] ==1:
				fireball_width = fireball2_width
				fireball_height = fireball2_height 

			if x + aircraft_width > fire_x:
				if (y > fire_y and y < fire_y + fireball_height) or (y + aircraft_height > fire_y and y + aircraft_height < fire_y + fireball_height):
					crash()

		drawObject(aircraft,x,y)

		if len(bullet_xy) != 0:
			for bx, by in bullet_xy:
				drawObject(bullet, bx, by)

		if not isShotEnemy:
			drawObject(enemy, enemy_x, enemy_y)
		else:
			drawObject(boom, enemy_x, enemy_y)
			boom_count += 1
			if boom_count > 5:
				boom_count = 0
				enemy_x = pad_width
				enemy_y = random.randrange(0, pad_height-enemy_height)
				isShotEnemy = False

		if fire[1] != None:
		 	drawObject(fire[1], fire_x, fire_y)

		pygame.display.update() #게임판을 다시 그림.
		clock.tick(60)          #FPS 60으로 설정하고 while문 반복

	pygame.quit() #초기화한 PyGame 종료. 
	quit()
  
 
def initGame():
	global gamepad,aircraft,clock, background1, background2
	global enemy, fires, boom, bullet

	fires = []

	pygame.init() #PyGame 라이브러리를 초기화. 
				  #PyGame을 활용하려면 최초에 pygame.init()을 호출해야 함.
	gamepad = pygame.display.set_mode((pad_width, pad_height)) #게임판 크기 초기 설정
	pygame.display.set_caption("PyFlying") #게임 이름을 "PyFlying"으로.
	aircraft = pygame.image.load('C:\doit\ShootingGame\plane.png') #비행기 이미지 로드.
	background1 = pygame.image.load('C:\doit\ShootingGame\\background.png') #배경 이미지 로드.
	background2 = background1.copy()
	enemy = pygame.image.load('C:\doit\ShootingGame\\bat.png')
	fires.append((0,pygame.image.load('C:\doit\ShootingGame\\fireball.png')))
	fires.append((1,pygame.image.load('C:\doit\ShootingGame\\fireball2.png')))
	bullet = pygame.image.load('C:\doit\ShootingGame\\bullet.png')
	boom = pygame.image.load('C:\doit\ShootingGame\\boom.png')

	for i in range(3):
		fires.append((i+2,None))

	clock = pygame.time.Clock() #초당 프레임(FPS)설정. 가장 자연스러운 FPS는 30이지만 여기선 60.
	runGame() #게임판 초기화 끝내고 게임구동함수 runGame() 호출.

initGame()
