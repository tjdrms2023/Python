import pygame
import random
from os import path

WIDTH, HEIGHT = 360, 480 # Frame size
FPS = 60 # Frame Per Second

# define colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
RED = (255, 0, 0)
GREEN = (0, 255, 0)
BLUE = (0, 0, 255)
YELLOW = (255, 255, 0)

img_dir = path.join(path.dirname(__file__), 'img')
snd_dir = path.join(path.dirname(__file__), 'snd')


pygame.init() # the command to start up pygame and 'initialize'
pygame.mixer.init() # for sound
screen = pygame.display.set_mode((WIDTH, HEIGHT)) # Create the frame
pygame.display.set_caption("Game") # Name of the game
clock = pygame.time.Clock() # make sure to run at the adequate FPS

font_name = pygame.font.match_font('arial')
def draw_text(surf, text, size, x, y):
	font = pygame.font.Font(font_name, size)
	# anti-aliasing if True.
	text_surface = font.render(text, True, WHITE)
	text_rect = text_surface.get_rect()
	text_rect.midtop = (x, y)
	surf.blit(text_surface, text_rect)

# collide하면 없어지므로 total number 유지하려면 newmob function 있어야.
def newmob():
	m = Mob()
	all_sprites.add(m)
	mobs.add(m)

def draw_shield_bar(surf, x, y, pct):
	if pct < 0:
		pct = 0
	BAR_LENGTH = 100
	BAR_HEIGHT = 10
	fill = (pct / 100) * BAR_LENGTH
	outline_rect = pygame.Rect(x, y, BAR_LENGTH, BAR_HEIGHT)
	fill_rect = pygame.Rect(x, y, fill, BAR_HEIGHT)
	pygame.draw.rect(surf, GREEN, fill_rect)
	pygame.draw.rect(surf, WHITE, outline_rect, 2)

class Player(pygame.sprite.Sprite):
	def __init__(self):
		pygame.sprite.Sprite.__init__(self)
		# 사이즈 너무 커서 재조정.
		self.image = pygame.transform.scale(player_img, (50,38))
		# set the transparent color using set_colorkey()
		self.image.set_colorkey(BLACK)
		self.rect = self.image.get_rect()
		self.radius = 20
		# pygame.draw.circle(self.image, RED, self.rect.center, self.radius)
		self.rect.centerx = WIDTH / 2
		self.rect.bottom = HEIGHT - 10 # locating the rect at the bottom center of the screen.
		self.speedx = 0 # keep tracking of how fast the rect is moving.
		self.shield = 100

	# the code that will happen every frame of the game.
	def update(self):
		self.speedx = 0
		keystate = pygame.key.get_pressed()
		if keystate[pygame.K_LEFT]:
			self.speedx = -8
		if keystate[pygame.K_RIGHT]:
			self.speedx = 8
		self.rect.x += self.speedx

		# make sure that the sprite doesn't go off the screen.
		if self.rect.right > WIDTH:
			self.rect.right = WIDTH
		if self.rect.left < 0:
			self.rect.left = 0

	def shoot(self):
		bullet = Bullet(self.rect.centerx, self.rect.top)
		all_sprites.add(bullet)
		bullets.add(bullet)
		# shoot_sound.play()

class Mob(pygame.sprite.Sprite):
	def __init__(self):
		pygame.sprite.Sprite.__init__(self)
		self.image_orig = random.choice(meteor_images)
		self.image_orig.set_colorkey(BLACK)
		self.image = self.image_orig.copy()
		self.rect = self.image.get_rect()
		self.radius = int(self.rect.width * 0.85/ 2)
		# pygame.draw.circle(self.image, RED, self.rect.center, self.radius)
		self.rect.x = random.randrange(WIDTH - self.rect.width)
		self.rect.y = random.randrange(-150, -100)
		self.speedy = random.randrange(1, 8)
		self.speedx = random.randrange(-3,3)

		self.rot = 0 # measure how many degrees the sprite should be rotated.
		self.rot_speed = random.randrange(-8, 8) # measure how many degrees the sprite should rotate each time
												 # bigger numbers will mean faster rotation.
		self.last_update = pygame.time.get_ticks() # find out how many milliseconds have elapsed since the clock was started

	def rotate(self):
		now = pygame.time.get_ticks()
		if now - self.last_update > 50:
			self.last_update = now
			self.rot = (self.rot + self.rot_speed) % 360
			new_image = pygame.transform.rotate(self.image_orig, self.rot)
			old_center = self.rect.center
			self.image = new_image
			self.rect = self.image.get_rect()
			self.rect.center = old_center

	def update(self):
		self.rotate()
		self.rect.y += self.speedy
		self.rect.x += self.speedx
		if self.rect.top > HEIGHT + 10 or self.rect.left < -25 or self.rect.right > WIDTH + 20:
			self.rect.x = random.randrange(WIDTH - self.rect.width)
			self.rect.y = random.randrange(-100, -40)
			self.speedy = random.randrange(1, 8)

class Bullet(pygame.sprite.Sprite):
	def __init__(self, x, y):
		pygame.sprite.Sprite.__init__(self)
		self.image = bullet_img
		self.image.set_colorkey(BLACK)
		self.rect = self.image.get_rect()
		self.rect.bottom = y
		self.rect.centerx = x
		self.speedy = -10 # negative value so that the bullet would go upward.

	def update(self):
		self.rect.y += self.speedy
		# kill if it moves off the top of the screen
		if self.rect.bottom < 0:
			self.kill()

background = pygame.image.load(path.join(img_dir, 'starfield.png')).convert()
background_rect = background.get_rect()
player_img = pygame.image.load(path.join(img_dir, 'playerShip1_orange.png')).convert()
bullet_img = pygame.image.load(path.join(img_dir, 'laserRed16.png')).convert()
meteor_images = []
meteor_list = ['meteorBrown_big1.png', 'meteorBrown_med1.png', 'meteorBrown_med1.png', 
                'meteorBrown_med3.png', 'meteorBrown_small1.png', 'meteorBrown_small2.png', 
                'meteorBrown_tiny1.png']
for img in meteor_list:
	meteor_images.append(pygame.image.load(path.join(img_dir, img)).convert())

''' Sound part

shoot_sound = pygame.mixer.Sound(path.join(snd_dir), 'pew.wav')
expl_sounds = []
for snd in ['expl3.wav', 'expl6.wav']:
	expl_sounds.append(pygame.mixer.Sound(path.join(snd_dir, snd)))	
pygame.mixer.music.load(path.join(snd_dir, 'tgfcoder-FrozenJam-SeamlessLoop.ogg'))
pygame.mixer.music.set_volume(0.4)
'''

all_sprites = pygame.sprite.Group() 
mobs = pygame.sprite.Group()
bullets = pygame.sprite.Group()

player = Player()
all_sprites.add(player) # every sprite created musted be added to all_sprites group
						# so that it will be updated and drawn on the screen.
for i in range(8):
	newmob()
score = 0
# pygame.mixer.music.play(loops =- 1)

#Game loop
running = True
while running: 
	# Make running to end the loop
	clock.tick(FPS) # Keep the loop running at the right speed. 
	# Process input (events)
	for event in pygame.event.get():
		# check for closing window
		if event.type == pygame.QUIT:
			running = False
		elif event.type == pygame.KEYDOWN:
			if event.key == pygame.K_SPACE:
				player.shoot()

	# Update
	all_sprites.update()

	# check to see if a bullet hits a mob
	hits = pygame.sprite.groupcollide(mobs, bullets, True, True)
	for hit in hits:
		score += 50 - hit.radius
		# random.choice(expl_sounds).play()
		newmob()

	# check to see if a mob hit the player
	hits = pygame.sprite.spritecollide(player, mobs, True, pygame.sprite.collide_circle)
	# third parameter is called 'dokill'. It sets whether the object 
	# should be deleted when it gets hit.
	# True로 바꿔야 부딫치면 없어짐. 

	# 한번에 다수의 meteor 부딫힐 수 있으므로 for문 사용.
	for hit in hits:
		player.shield -= hit.radius * 2
		newmob()
		if player.shield <= 0:
			running = False
	# Render / Draw
	screen.fill(BLACK)
	screen.blit(background, background_rect)
	all_sprites.draw(screen)
	draw_text(screen, str(score), 18, WIDTH / 2, 10)
	draw_shield_bar(screen, 5, 5, player.shield)
	# Double Buffering
	pygame.display.flip() # Print out and calculate the buffer simulataneously

pygame.quit()
